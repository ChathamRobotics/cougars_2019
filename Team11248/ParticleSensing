package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.util.ElapsedTime;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.TfodRoverRuckus;
import java.util.List;
@Autonomous(name = "Concept: TensorFlow Object Detection", group = "Concept")
//@Disabled
public class ParticleSensing extends LinearOpMode {
   private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";
   private static final String LABEL_GOLD_MINERAL = "Gold Mineral";
   private static final String LABEL_SILVER_MINERAL = "Silver Mineral";
   public int goldPosition = 1;
   HardwareDec6 robot           = new HardwareDec6();
   private ElapsedTime runtime = new ElapsedTime();
   private static final String VUFORIA_KEY = " AXsx35v/////AAABmWBqbBfSMEPupurLi7k1PLddw5sIyRD6WNQ+9v0DD4mKN9RWaPTy6gOlH1N9SANJpYeA5raCC0T/HmxzW+FpKJ6yVynJcXqOqD/sfiu6uIhj2+QjEuT0Yr0CazIjmhi7p1G4uR82t99PvqOIgsN81qH5JTAkxHyOEQTaRyG6Hey4AXkOwIfRwjNSQqEW+/rjC0Ji4+XlkraVlHGy4YazdGO9igcP16R7BCaCpezrZ6dmg3QghgDja8DeA2LImH5NOCyRkRYlacWmvN9H5UvmpVaROxz4kNYxvYE2atfhCyOs7B9iVAX7M/S7SCE3RIr8U0MQY/+7gMTvsO/ByntoU6LhorEEJF4y1Oj0ulvqtGqG ";
   /**
    * {@link #vuforia} is the variable we will use to store our instance of the Vuforia
    * localization engine.
    */
   private VuforiaLocalizer vuforia;
   /**
    * {@link #tfod} is the variable we will use to store our instance of the Tensor Flow Object
    * Detection engine.
    */
   private TFObjectDetector tfod;

   @Override
   public void runOpMode() {
       // The TFObjectDetector uses the camera frames from the VuforiaLocalizer, so we create that
       // first.

       initVuforia();

       if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
           initTfod();
       } else {
           telemetry.addData("Sorry!", "This device is not compatible with TFOD");
       }


       /** Wait for the game to begin */
       telemetry.addData(">", "Press Play to start tracking");
       telemetry.update();
       waitForStart();

       if (opModeIsActive()) {
           /** Activate Tensor Flow Object Detection. */
           if (tfod != null) {
               tfod.activate();
           }

           while (opModeIsActive()) {
               if (tfod != null) {
                   // getUpdatedRecognitions() will return null if no new information is available since
                   // the last time that call was made.
                   List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                   if (updatedRecognitions != null) {
                     telemetry.addData("# Object Detected", updatedRecognitions.size());
                     if (updatedRecognitions.size() == 2) {
                       int goldMineralX = -1;
                       int silverMineral1X = -1;
                       int silverMineral2X = -1;
                       for (Recognition recognition : updatedRecognitions) {
                         if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                           goldMineralX = (int) recognition.getLeft();
                         } else if (silverMineral1X == -1) {
                           silverMineral1X = (int) recognition.getLeft();
                         } else {
                           silverMineral2X = (int) recognition.getLeft();
                         }
                       }
                         // If there is no gold (-1) and there two silvers (not -1) the gold
                         // is not visible, and must be on the right
                         if (goldMineralX == -1 && silverMineral1X != -1 && silverMineral2X != -1)
                         {
                             telemetry.addData("Gold Mineral Position", "Left");
                             goldPosition = 3;
                         }
                         // If you can see one gold and one silver ...
                         else if (goldMineralX != -1 && silverMineral1X != -1)
                         {
                             // ... if the gold is to the right of the silver, the gold is in the center ...

                             if (goldMineralX > silverMineral1X)
                             {
                                 telemetry.addData("Gold Mineral Position", "Right");
                                 goldPosition = 1;
                             }
                             // ... otherwise it is on the left
                             else
                             {
                                 telemetry.addData("Gold Mineral Position", "Center");
                                 goldPosition = 2;
                             }
                       }
                     }
                     telemetry.update();
                   }
               }
           }
       }
       if (tfod != null) {
           tfod.shutdown();
       }
   }

   /*
    * Initialize the Vuforia localization engine.
    */
   private void initVuforia() {
       /*
        * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
        */
       VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();
       parameters.vuforiaLicenseKey = VUFORIA_KEY;
       parameters.cameraDirection = CameraDirection.FRONT;
       TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters();
       tfodParameters.minimumConfidence = 0.75;
       //  Instantiate the Vuforia engine
       vuforia = ClassFactory.getInstance().createVuforia(parameters);
       // Loading trackables is not necessary for the Tensor Flow Object Detection engine.
   }
   /*
    * Initialize the Tensor Flow Object Detection engine.
    */
   private void initTfod() {
       int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
           "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
       TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
       tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
       tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_GOLD_MINERAL, LABEL_SILVER_MINERAL);
   }
}
